diff -Nur a/xbmc/utils/AMLUtils.cpp b/xbmc/utils/AMLUtils.cpp
--- a/xbmc/utils/AMLUtils.cpp	2015-01-29 18:47:09.000000000 +0000
+++ b/xbmc/utils/AMLUtils.cpp	2015-02-05 19:22:10.622318665 +0000
@@ -28,77 +28,22 @@
 #include "AMLUtils.h"
 #include "utils/CPUInfo.h"
 #include "utils/log.h"
+#include "utils/SysfsUtils.h"
 #include "utils/StringUtils.h"
 #include "utils/AMLUtils.h"
 #include "guilib/gui3d.h"
 
-int aml_set_sysfs_str(const char *path, const char *val)
-{
-  int fd = open(path, O_CREAT | O_RDWR | O_TRUNC, 0644);
-  if (fd >= 0)
-  {
-    write(fd, val, strlen(val));
-    close(fd);
-    return 0;
-  }
-  return -1;
-}
-
-int aml_get_sysfs_str(const char *path, char *valstr, const int size)
-{
-  int fd = open(path, O_RDONLY);
-  if (fd >= 0)
-  {
-    read(fd, valstr, size - 1);
-    valstr[strlen(valstr)] = '\0';
-    close(fd);
-    return 0;
-  }
-
-  sprintf(valstr, "%s", "fail");
-  return -1;
-}
-
-int aml_set_sysfs_int(const char *path, const int val)
-{
-  int fd = open(path, O_CREAT | O_RDWR | O_TRUNC, 0644);
-  if (fd >= 0)
-  {
-    char bcmd[16];
-    sprintf(bcmd, "%d", val);
-    write(fd, bcmd, strlen(bcmd));
-    close(fd);
-    return 0;
-  }
-  return -1;
-}
-
-int aml_get_sysfs_int(const char *path)
-{
-  int val = -1;
-  int fd = open(path, O_RDONLY);
-  if (fd >= 0)
-  {
-    char bcmd[16];
-    read(fd, bcmd, sizeof(bcmd));
-    val = strtol(bcmd, NULL, 16);
-    close(fd);
-  }
-  return val;
-}
-
 bool aml_present()
 {
   static int has_aml = -1;
   if (has_aml == -1)
   {
-    int rtn = aml_get_sysfs_int("/sys/class/audiodsp/digital_raw");
-    if (rtn != -1)
+    if (SysfsUtils::Has("/sys/class/audiodsp/digital_raw"))
       has_aml = 1;
     else
       has_aml = 0;
     if (has_aml)
-      CLog::Log(LOGNOTICE, "aml_present, rtn(%d)", rtn);
+      CLog::Log(LOGNOTICE, "AML device detected");
   }
   return has_aml == 1;
 }
@@ -108,10 +53,12 @@
   static int has_hw3d = -1;
   if (has_hw3d == -1)
   {
-    if (aml_get_sysfs_int("/sys/class/ppmgr/ppmgr_3d_mode") != -1)
+    if (SysfsUtils::Has("/sys/class/ppmgr/ppmgr_3d_mode"))
       has_hw3d = 1;
     else
       has_hw3d = 0;
+    if (has_hw3d)
+      CLog::Log(LOGNOTICE, "AML 3D support detected");
   }
   return has_hw3d == 1;
 }
@@ -121,8 +68,8 @@
   static int has_wired = -1;
   if (has_wired == -1)
   {
-    char test[64] = {0};
-    if (aml_get_sysfs_str("/sys/class/net/eth0/operstate", test, 63) != -1)
+    std::string test;
+    if (SysfsUtils::GetString("/sys/class/net/eth0/operstate", test) != -1)
       has_wired = 1;
     else
       has_wired = 0;
@@ -159,6 +106,16 @@
   }
 }
 
+bool aml_support_hevc()
+{
+  std::string valstr;
+  if(SysfsUtils::GetString("/sys/class/amstream/vcodec_profile", valstr) != 0)
+  {
+    return false;
+  }
+  return (valstr.find("hevc:") != std::string::npos);
+}
+
 enum AML_DEVICE_TYPE aml_get_device_type()
 {
   static enum AML_DEVICE_TYPE aml_device_type = AML_DEVICE_TYPE_UNINIT;
@@ -173,8 +130,14 @@
       aml_device_type = AML_DEVICE_TYPE_M3;
     else if (cpu_hardware.find("Meson6") != std::string::npos)
       aml_device_type = AML_DEVICE_TYPE_M6;
-    else if (cpu_hardware.find("Meson8") != std::string::npos)
-      aml_device_type = AML_DEVICE_TYPE_M8;
+    else if ((cpu_hardware.find("Meson8") != std::string::npos) && (cpu_hardware.find("Meson8B") == std::string::npos))
+    {
+      if (aml_support_hevc())
+        aml_device_type = AML_DEVICE_TYPE_M8M2;
+      else
+        aml_device_type = AML_DEVICE_TYPE_M8;
+    } else if (cpu_hardware.find("Meson8B") != std::string::npos)
+      aml_device_type = AML_DEVICE_TYPE_M8B;
     else
       aml_device_type = AML_DEVICE_TYPE_UNKNOWN;
   }
@@ -194,7 +157,7 @@
     if (limit)
       cpufreq = 600000;
 
-    aml_set_sysfs_int("/sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq", cpufreq);
+    SysfsUtils::SetInt("/sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq", cpufreq);
   }
 #endif
 }
@@ -209,8 +172,8 @@
     if (limit)
       cpufreq = 800000;
 
-    aml_set_sysfs_int("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", cpufreq);
-    aml_set_sysfs_str("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor", "ondemand");
+    SysfsUtils::SetInt("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", cpufreq);
+    SysfsUtils::SetString("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor", "ondemand");
   }
 }
 
@@ -222,7 +185,7 @@
   {
     // m1 uses 1, m3 and above uses 2
     int raw = aml_get_device_type() == AML_DEVICE_TYPE_M1 ? 1:2;
-    aml_set_sysfs_int("/sys/class/audiodsp/digital_raw", passthrough ? raw:0);
+    SysfsUtils::SetInt("/sys/class/audiodsp/digital_raw", passthrough ? raw:0);
   }
 }
 
@@ -292,11 +255,11 @@
 
 int aml_axis_value(AML_DISPLAY_AXIS_PARAM param)
 {
-  char axis[20] = {0};
+  std::string axis;
   int value[8];
 
-  aml_get_sysfs_str("/sys/class/display/axis", axis, 19);
-  sscanf(axis, "%d %d %d %d %d %d %d %d", &value[0], &value[1], &value[2], &value[3], &value[4], &value[5], &value[6], &value[7]);
+  SysfsUtils::GetString("/sys/class/display/axis", axis);
+  sscanf(axis.c_str(), "%d %d %d %d %d %d %d %d", &value[0], &value[1], &value[2], &value[3], &value[4], &value[5], &value[6], &value[7]);
 
   return value[param];
 }
diff -Nur a/xbmc/utils/AMLUtils.h b/xbmc/utils/AMLUtils.h
--- a/xbmc/utils/AMLUtils.h	2015-01-29 18:47:08.000000000 +0000
+++ b/xbmc/utils/AMLUtils.h	2015-02-05 19:22:44.585679120 +0000
@@ -28,7 +28,9 @@
   AML_DEVICE_TYPE_M1,
   AML_DEVICE_TYPE_M3,
   AML_DEVICE_TYPE_M6,
-  AML_DEVICE_TYPE_M8
+  AML_DEVICE_TYPE_M8,   // S802
+  AML_DEVICE_TYPE_M8B,  // S805
+  AML_DEVICE_TYPE_M8M2  // S812
 };
 
 enum AML_DISPLAY_AXIS_PARAM
@@ -39,15 +41,11 @@
   AML_DISPLAY_AXIS_PARAM_HEIGHT
 };
 
-int aml_set_sysfs_str(const char *path, const char *val);
-int aml_get_sysfs_str(const char *path, char *valstr, const int size);
-int aml_set_sysfs_int(const char *path, const int val);
-int aml_get_sysfs_int(const char *path);
-
 bool aml_present();
 void aml_permissions();
 bool aml_hw3d_present();
 bool aml_wired_present();
+bool aml_support_hevc();
 enum AML_DEVICE_TYPE aml_get_device_type();
 void aml_cpufreq_min(bool limit);
 void aml_cpufreq_max(bool limit);
diff -Nur a/xbmc/utils/Makefile.in b/xbmc/utils/Makefile.in
--- a/xbmc/utils/Makefile.in	2015-01-29 18:47:08.000000000 +0000
+++ b/xbmc/utils/Makefile.in	2015-02-05 19:23:14.677113068 +0000
@@ -79,6 +79,7 @@
 SRCS += Utf8Utils.cpp
 SRCS += XSLTUtils.cpp
 SRCS += ActorProtocol.cpp 
+SRCS += SysfsUtils.cpp
 
 ifeq (@USE_OPENGLES@,1)
 SRCS += AMLUtils.cpp
diff -Nur a/xbmc/utils/SysfsUtils.cpp b/xbmc/utils/SysfsUtils.cpp
--- a/xbmc/utils/SysfsUtils.cpp	1970-01-01 00:00:00.000000000 +0000
+++ b/xbmc/utils/SysfsUtils.cpp	2015-02-05 19:23:36.516702583 +0000
@@ -0,0 +1,104 @@
+/*
+ *      Copyright (C) 2011-2014 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "SysfsUtils.h"
+#include "utils/log.h"
+
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <string.h>
+
+int SysfsUtils::SetString(const std::string& path, const std::string& valstr)
+{
+  int fd = open(path.c_str(), O_CREAT | O_RDWR | O_TRUNC, 0644);
+  if (fd >= 0)
+  {
+    write(fd, valstr.c_str(), valstr.size());
+    close(fd);
+    return 0;
+  }
+  CLog::Log(LOGERROR, "%s: error writing %s",__FUNCTION__, path.c_str());
+  return -1;
+}
+
+int SysfsUtils::GetString(const std::string& path, std::string& valstr)
+{
+  int len;
+  char buf[256] = {0};
+
+  int fd = open(path.c_str(), O_RDONLY);
+  if (fd >= 0)
+  {
+    valstr.clear();
+    while ((len = read(fd, buf, 256)) > 0)
+      valstr.append(buf, len);
+    close(fd);
+    return 0;
+  }
+
+  CLog::Log(LOGERROR, "%s: error reading %s",__FUNCTION__, path.c_str());
+  valstr = "fail";
+  return -1;
+}
+
+int SysfsUtils::SetInt(const std::string& path, const int val)
+{
+  int fd = open(path.c_str(), O_CREAT | O_RDWR | O_TRUNC, 0644);
+  if (fd >= 0)
+  {
+    char bcmd[16];
+    sprintf(bcmd, "%d", val);
+    write(fd, bcmd, strlen(bcmd));
+    close(fd);
+    return 0;
+  }
+
+  CLog::Log(LOGERROR, "%s: error writing %s",__FUNCTION__, path.c_str());
+  return -1;
+}
+
+int SysfsUtils::GetInt(const std::string& path, int& val)
+{
+  int fd = open(path.c_str(), O_RDONLY);
+  if (fd >= 0)
+  {
+    char bcmd[16];
+    read(fd, bcmd, sizeof(bcmd));
+    val = strtol(bcmd, NULL, 16);
+    close(fd);
+    return 0;
+  }
+
+  CLog::Log(LOGERROR, "%s: error reading %s",__FUNCTION__, path.c_str());
+  return -1;
+}
+
+bool SysfsUtils::Has(const std::string &path)
+{
+  int fd = open(path.c_str(), O_RDONLY);
+  if (fd >= 0)
+  {
+    close(fd);
+    return true;
+  }
+  return false;
+}
diff -Nur a/xbmc/utils/SysfsUtils.h b/xbmc/utils/SysfsUtils.h
--- a/xbmc/utils/SysfsUtils.h	1970-01-01 00:00:00.000000000 +0000
+++ b/xbmc/utils/SysfsUtils.h	2015-02-05 19:23:58.812283820 +0000
@@ -0,0 +1,32 @@
+#pragma once
+/*
+ *      Copyright (C) 2011-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <string>
+
+class SysfsUtils
+{
+public:
+  static int SetString(const std::string& path, const std::string& valstr);
+  static int GetString(const std::string& path, std::string& valstr);
+  static int SetInt(const std::string& path, const int val);
+  static int GetInt(const std::string& path, int& val);
+  static bool Has(const std::string& path);
+};
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp       2015-02-09 16:30:26.316506763 +0000
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp       2015-02-09 16:39:54.852973789 +0000
@@ -22,6 +22,7 @@
 #include "guilib/gui3d.h"
 #include "utils/AMLUtils.h"
 #include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"

 #include <stdlib.h>
 #include <linux/fb.h>
@@ -49,13 +50,12 @@

 bool CEGLNativeTypeAmlogic::CheckCompatibility()
 {
-  char name[256] = {0};
+  std::string name;
   std::string modalias = "/sys/class/graphics/" + m_framebuffer_name + "/device/modalias";

-  aml_get_sysfs_str(modalias.c_str(), name, 255);
-  CStdString strName = name;
-  StringUtils::Trim(strName);
-  if (strName == "platform:mesonfb")
+  SysfsUtils::GetString(modalias, name);
+  StringUtils::Trim(name);
+  if (name == "platform:mesonfb")
     return true;
   return false;
 }
@@ -130,9 +130,9 @@

 bool CEGLNativeTypeAmlogic::GetNativeResolution(RESOLUTION_INFO *res) const
 {
-  char mode[256] = {0};
-  aml_get_sysfs_str("/sys/class/display/mode", mode, 255);
-  return aml_mode_to_resolution(mode, res);
+  std::string mode;
+  SysfsUtils::GetString("/sys/class/display/mode", mode);
+  return aml_mode_to_resolution(mode.c_str(), res);
 }

 bool CEGLNativeTypeAmlogic::SetNativeResolution(const RESOLUTION_INFO &res)
@@ -200,8 +200,8 @@
   std::vector<std::string> probe_str;
   if (IsHdmiConnected())
   {
-    char valstr[256] = {0};
-    aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr, 255);
+    std::string valstr;
+    SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr);
     probe_str = StringUtils::Split(valstr, "\n");
   }
   else
@@ -239,7 +239,7 @@
 bool CEGLNativeTypeAmlogic::ShowWindow(bool show)
 {
   std::string blank_framebuffer = "/sys/class/graphics/" + m_framebuffer_name + "/blank";
-  aml_set_sysfs_int(blank_framebuffer.c_str(), show ? 0 : 1);
+  SysfsUtils::SetInt(blank_framebuffer.c_str(), show ? 0 : 1);
   return true;
 }

@@ -247,7 +247,7 @@
 {
   CStdString mode = resolution;
   // switch display resolution
-  aml_set_sysfs_str("/sys/class/display/mode", mode.c_str());
+  SysfsUtils::SetString("/sys/class/display/mode", mode.c_str());

   RESOLUTION_INFO res;
   aml_mode_to_resolution(mode, &res);
@@ -258,30 +258,30 @@

 void CEGLNativeTypeAmlogic::SetupVideoScaling(const char *mode)
 {
-  aml_set_sysfs_int("/sys/class/graphics/fb0/blank",      1);
-  aml_set_sysfs_int("/sys/class/graphics/fb0/free_scale", 0);
-  aml_set_sysfs_int("/sys/class/graphics/fb1/free_scale", 0);
-  aml_set_sysfs_int("/sys/class/ppmgr/ppscaler",          0);
+  SysfsUtils::SetInt("/sys/class/graphics/fb0/blank",      1);
+  SysfsUtils::SetInt("/sys/class/graphics/fb0/free_scale", 0);
+  SysfsUtils::SetInt("/sys/class/graphics/fb1/free_scale", 0);
+  SysfsUtils::SetInt("/sys/class/ppmgr/ppscaler",          0);

   if (strstr(mode, "1080"))
   {
-    aml_set_sysfs_str("/sys/class/graphics/fb0/request2XScale", "8");
-    aml_set_sysfs_str("/sys/class/graphics/fb1/scale_axis",     "1280 720 1920 1080");
-    aml_set_sysfs_str("/sys/class/graphics/fb1/scale",          "0x10001");
+    SysfsUtils::SetString("/sys/class/graphics/fb0/request2XScale", "8");
+    SysfsUtils::SetString("/sys/class/graphics/fb1/scale_axis",     "1280 720 1920 1080");
+    SysfsUtils::SetString("/sys/class/graphics/fb1/scale",          "0x10001");
   }
   else
   {
-    aml_set_sysfs_str("/sys/class/graphics/fb0/request2XScale", "16 1280 720");
+    SysfsUtils::SetString("/sys/class/graphics/fb0/request2XScale", "16 1280 720");
   }

-  aml_set_sysfs_int("/sys/class/graphics/fb0/blank", 0);
+  SysfsUtils::SetInt("/sys/class/graphics/fb0/blank", 0);
 }

 void CEGLNativeTypeAmlogic::DisableFreeScale()
 {
   // turn off frame buffer freescale
-  aml_set_sysfs_int("/sys/class/graphics/fb0/free_scale", 0);
-  aml_set_sysfs_int("/sys/class/graphics/fb1/free_scale", 0);
+  SysfsUtils::SetInt("/sys/class/graphics/fb0/free_scale", 0);
+  SysfsUtils::SetInt("/sys/class/graphics/fb1/free_scale", 0);
 }

 void CEGLNativeTypeAmlogic::SetFramebufferResolution(const RESOLUTION_INFO &res) const
@@ -314,6 +314,6 @@
 bool CEGLNativeTypeAmlogic::IsHdmiConnected() const
 {
   char hpd_state[2] = {0};
-  aml_get_sysfs_str("/sys/class/amhdmitx/amhdmitx0/hpd_state", hpd_state, 2);
+  SysfsUtils::SetString("/sys/class/amhdmitx/amhdmitx0/hpd_state", hpd_state);
   return hpd_state[0] == '1';
 }
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.cpp	2015-01-29 18:47:11.000000000 +0000
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.cpp	2015-02-05 19:25:14.150870959 +0000
@@ -28,6 +28,7 @@
 #include "utils/log.h"
 #include "utils/RegExp.h"
 #include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
 #include "utils/Environment.h"
 #include "guilib/gui3d.h"
 #include "windowing/WindowingFactory.h"
@@ -190,7 +191,7 @@
 bool CEGLNativeTypeIMX::GetNativeResolution(RESOLUTION_INFO *res) const
 {
   std::string mode;
-  get_sysfs_str("/sys/class/graphics/fb0/mode", mode);
+  SysfsUtils::GetString("/sys/class/graphics/fb0/mode", mode);
   return ModeToResolution(mode, res);
 }
 
@@ -200,14 +201,14 @@
     return false;
 
   std::string mode;
-  get_sysfs_str("/sys/class/graphics/fb0/mode", mode);
+  SysfsUtils::GetString("/sys/class/graphics/fb0/mode", mode);
   if (res.strId == mode)
     return false;
 
   DestroyNativeWindow();
   DestroyNativeDisplay();
 
-  set_sysfs_str("/sys/class/graphics/fb0/mode", res.strId);
+  SysfsUtils::SetString("/sys/class/graphics/fb0/mode", res.strId);
 
   CreateNativeDisplay();
 
@@ -225,7 +226,7 @@
     return false;
 
   std::string valstr;
-  get_sysfs_str("/sys/class/graphics/fb0/modes", valstr);
+  SysfsUtils::GetString("/sys/class/graphics/fb0/modes", valstr);
   std::vector<std::string> probe_str;
   probe_str = StringUtils::Split(valstr, "\n");
 
@@ -257,41 +258,6 @@
   return false;
 }
 
-int CEGLNativeTypeIMX::get_sysfs_str(std::string path, std::string& valstr) const
-{
-  int len;
-  char buf[256] = {0};
-
-  int fd = open(path.c_str(), O_RDONLY);
-  if (fd >= 0)
-  {
-    while ((len = read(fd, buf, 255)) > 0)
-      valstr.append(buf, len);
-    close(fd);
-  }
-  else
-  {
-    CLog::Log(LOGERROR, "%s: error reading %s",__FUNCTION__, path.c_str());
-    valstr = "fail";
-    return -1;
-  }
-  return 0;
-}
-
-int CEGLNativeTypeIMX::set_sysfs_str(std::string path, std::string val) const
-{
-  int fd = open(path.c_str(), O_WRONLY);
-  if (fd >= 0)
-  {
-    val += '\n';
-    write(fd, val.c_str(), val.size());
-    close(fd);
-    return 0;
-  }
-  CLog::Log(LOGERROR, "%s: error writing %s",__FUNCTION__, path.c_str());
-  return -1;
-}
-
 bool CEGLNativeTypeIMX::ModeToResolution(std::string mode, RESOLUTION_INFO *res) const
 {
   if (!res)
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeIMX.h b/xbmc/windowing/egl/EGLNativeTypeIMX.h
--- a/xbmc/windowing/egl/EGLNativeTypeIMX.h	2015-01-29 18:47:11.000000000 +0000
+++ b/xbmc/windowing/egl/EGLNativeTypeIMX.h	2015-02-05 19:25:26.482640013 +0000
@@ -50,8 +50,6 @@
 
 protected:
   bool m_readonly;
-  int get_sysfs_str(std::string path, std::string& valstr) const;
-  int set_sysfs_str(std::string path, std::string val) const;
   bool ModeToResolution(std::string mode, RESOLUTION_INFO *res) const;
 
   EGLNativeDisplayType m_display;
diff -Nur a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp	2015-01-29 18:47:12.000000000 +0000
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/AMLCodec.cpp	2015-02-05 20:51:58.268539926 +0000
@@ -33,6 +33,7 @@
 #include "utils/AMLUtils.h"
 #include "utils/log.h"
 #include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
 #include "utils/TimeUtils.h"
 
 #if defined(TARGET_ANDROID)
@@ -468,6 +469,9 @@
     case AV_CODEC_ID_CAVS:
       format = VFORMAT_AVS;
       break;
+    case AV_CODEC_ID_HEVC:
+      format = VFORMAT_HEVC;
+      break;
 
     default:
       format = VFORMAT_UNSUPPORT;
@@ -577,6 +581,10 @@
       // avs
       dec_type = VIDEO_DEC_FORMAT_AVS;
       break;
+    case AV_CODEC_ID_HEVC:
+      // h265
+      dec_type = VIDEO_DEC_FORMAT_HEVC;
+      break;
     default:
       dec_type = VIDEO_DEC_FORMAT_UNKNOW;
       break;
@@ -933,9 +941,7 @@
 static int h264_write_header(am_private_t *para, am_packet_t *pkt)
 {
     // CLog::Log(LOGDEBUG, "h264_write_header");
-    int ret = -1;
-
-    ret = h264_add_header(para->extradata, para->extrasize, pkt);
+    int ret = h264_add_header(para->extradata, para->extrasize, pkt);
     if (ret == PLAYER_SUCCESS) {
         //if (ctx->vcodec) {
         if (1) {
@@ -951,6 +957,28 @@
     return ret;
 }
 
+static int hevc_add_header(unsigned char *buf, int size,  am_packet_t *pkt)
+{
+    memcpy(pkt->hdr->data, buf, size);
+    pkt->hdr->size = size;
+    return PLAYER_SUCCESS;
+}
+
+static int hevc_write_header(am_private_t *para, am_packet_t *pkt)
+{
+    int ret = -1;
+
+    if (para->extradata) {
+      ret = hevc_add_header(para->extradata, para->extrasize, pkt);
+    }
+    if (ret == PLAYER_SUCCESS) {
+      pkt->codec = &para->vcodec;
+      pkt->newflag = 1;
+      ret = write_av_packet(para, pkt);
+    }
+    return ret;
+}
+
 static int wmv3_write_header(am_private_t *para, am_packet_t *pkt)
 {
     CLog::Log(LOGDEBUG, "wmv3_write_header");
@@ -1125,6 +1153,11 @@
             if (ret != PLAYER_SUCCESS) {
                 return ret;
             }
+        } else if (VFORMAT_HEVC == para->video_format) {
+            ret = hevc_write_header(para, pkt);
+            if (ret != PLAYER_SUCCESS) {
+                return ret;
+            }
         }
 
         if (pkt->hdr) {
@@ -1581,16 +1614,11 @@
         am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
       break;
     case VFORMAT_H264_4K2K:
-      if (aml_get_device_type() == AML_DEVICE_TYPE_M8) {
-        am_private->gcodec.format = VIDEO_DEC_FORMAT_H264_4K2K;
-        am_private->gcodec.param  = (void*)EXTERNAL_PTS;
-        // h264 in an avi file
-        if (m_hints.ptsinvalid)
-          am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
-      } else {
-        CLog::Log(LOGDEBUG, "CAMLCodec::OpenDecoder codec init failed, 4K supported only on Meson8.");
-        return false;
-      }
+      am_private->gcodec.format = VIDEO_DEC_FORMAT_H264_4K2K;
+      am_private->gcodec.param  = (void*)EXTERNAL_PTS;
+      // h264 in an avi file
+      if (m_hints.ptsinvalid)
+        am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
       break; 
     case VFORMAT_REAL:
       am_private->stream_type = AM_STREAM_RM;
@@ -1620,6 +1648,12 @@
       if (m_hints.ptsinvalid)
         am_private->gcodec.param = (void*)EXTERNAL_PTS;
       break;
+    case VFORMAT_HEVC:
+      am_private->gcodec.format = VIDEO_DEC_FORMAT_HEVC;
+      am_private->gcodec.param  = (void*)EXTERNAL_PTS;
+      if (m_hints.ptsinvalid)
+        am_private->gcodec.param = (void*)(EXTERNAL_PTS | SYNC_OUTSIDE);
+      break;
   }
   am_private->gcodec.param = (void *)((unsigned int)am_private->gcodec.param | (am_private->video_rotation_degree << 16));
 
@@ -1643,7 +1677,7 @@
   m_dll->codec_set_cntl_avthresh(&am_private->vcodec, AV_SYNC_THRESH);
   m_dll->codec_set_cntl_syncthresh(&am_private->vcodec, 0);
   // disable tsync, we are playing video disconnected from audio.
-  aml_set_sysfs_int("/sys/class/tsync/enable", 0);
+  SysfsUtils::SetInt("/sys/class/tsync/enable", 0);
 
   am_private->am_pkt.codec = &am_private->vcodec;
   pre_header_feeding(am_private, &am_private->am_pkt);
@@ -1655,15 +1689,15 @@
 
   m_display_rect = CRect(0, 0, CDisplaySettings::Get().GetCurrentResolutionInfo().iWidth, CDisplaySettings::Get().GetCurrentResolutionInfo().iHeight);
 
-  char buffer[256] = {0};
-  aml_get_sysfs_str("/sys/class/ppmgr/ppscaler", buffer, 255);
-  if (!strstr(buffer, "enabled"))     // Scaler not enabled, use screen size
+  std::string strScaler;
+  SysfsUtils::GetString("/sys/class/ppmgr/ppscaler", strScaler);
+  if (strScaler.find("enabled") != std::string::npos)     // Scaler not enabled, use screen size
   {
     CLog::Log(LOGDEBUG, "ppscaler not enabled");
-    memset(buffer, 0, 256);
-    aml_get_sysfs_str("/sys/class/display/mode", buffer, 255);
+    std::string mode;
+    SysfsUtils::GetString("/sys/class/display/mode", mode);
     RESOLUTION_INFO res;
-    if (aml_mode_to_resolution(buffer, &res))
+    if (aml_mode_to_resolution(mode.c_str(), &res))
       m_display_rect = CRect(0, 0, res.iScreenWidth, res.iScreenHeight);
   }
 
@@ -1671,11 +1705,11 @@
   // if display is set to 1080xxx, then disable deinterlacer for HD content
   // else bandwidth usage is too heavy and it will slow down video decoder.
   char display_mode[256] = {0};
-  aml_get_sysfs_str("/sys/class/display/mode", display_mode, 255);
+  SysfsUtils::GetString("/sys/class/display/mode", display_mode, 255);
   if (strstr(display_mode,"1080"))
-    aml_set_sysfs_int("/sys/module/di/parameters/bypass_all", 1);
+    SysfsUtils::SetInt("/sys/module/di/parameters/bypass_all", 1);
   else
-    aml_set_sysfs_int("/sys/module/di/parameters/bypass_all", 0);
+    SysfsUtils::SetInt("/sys/module/di/parameters/bypass_all", 0);
 */
 
   m_opened = true;
@@ -1708,7 +1742,7 @@
   free(am_private->extradata);
   am_private->extradata = NULL;
   // return tsync to default so external apps work
-  aml_set_sysfs_int("/sys/class/tsync/enable", 1);
+  SysfsUtils::SetInt("/sys/class/tsync/enable", 1);
 
   ShowMainVideo(false);
 }
@@ -1721,8 +1755,9 @@
     return;
 
   // set the system blackout_policy to leave the last frame showing
-  int blackout_policy = aml_get_sysfs_int("/sys/class/video/blackout_policy");
-  aml_set_sysfs_int("/sys/class/video/blackout_policy", 0);
+  int blackout_policy;
+  SysfsUtils::GetInt("/sys/class/video/blackout_policy", blackout_policy);
+  SysfsUtils::SetInt("/sys/class/video/blackout_policy", 0);
 
   // restore the speed (some amcodec versions require this)
   if (m_speed != DVD_PLAYSPEED_NORMAL)
@@ -1742,7 +1777,7 @@
   pre_header_feeding(am_private, &am_private->am_pkt);
 
   // restore the saved system blackout_policy value
-  aml_set_sysfs_int("/sys/class/video/blackout_policy", blackout_policy);
+  SysfsUtils::SetInt("/sys/class/video/blackout_policy", blackout_policy);
 
   // reset some interal vars
   m_1st_pts = 0;
@@ -2065,7 +2100,7 @@
   if (saved_disable_video == disable_video)
     return;
 
-  aml_set_sysfs_int("/sys/class/video/disable_video", disable_video);
+  SysfsUtils::SetInt("/sys/class/video/disable_video", disable_video);
   saved_disable_video = disable_video;
 }
 
@@ -2074,7 +2109,7 @@
   // input zoom range is 0.5 to 2.0 with a default of 1.0.
   // output zoom range is 2 to 300 with default of 100.
   // we limit that to a range of 50 to 200 with default of 100.
-  aml_set_sysfs_int("/sys/class/video/zoom", (int)(100 * zoom));
+  SysfsUtils::SetInt("/sys/class/video/zoom", (int)(100 * zoom));
 }
 
 void CAMLCodec::SetVideoContrast(const int contrast)
@@ -2082,19 +2117,19 @@
   // input contrast range is 0 to 100 with default of 50.
   // output contrast range is -255 to 255 with default of 0.
   int aml_contrast = (255 * (contrast - 50)) / 50;
-  aml_set_sysfs_int("/sys/class/video/contrast", aml_contrast);
+  SysfsUtils::SetInt("/sys/class/video/contrast", aml_contrast);
 }
 void CAMLCodec::SetVideoBrightness(const int brightness)
 {
   // input brightness range is 0 to 100 with default of 50.
   // output brightness range is -127 to 127 with default of 0.
   int aml_brightness = (127 * (brightness - 50)) / 50;
-  aml_set_sysfs_int("/sys/class/video/brightness", aml_brightness);
+  SysfsUtils::SetInt("/sys/class/video/brightness", aml_brightness);
 }
 void CAMLCodec::SetVideoSaturation(const int saturation)
 {
   // output saturation range is -127 to 127 with default of 127.
-  aml_set_sysfs_int("/sys/class/video/saturation", saturation);
+  SysfsUtils::SetInt("/sys/class/video/saturation", saturation);
 }
 
 void CAMLCodec::GetRenderFeatures(Features &renderFeatures)
@@ -2110,7 +2145,7 @@
 void CAMLCodec::SetVideo3dMode(const int mode3d)
 {
   CLog::Log(LOGDEBUG, "CAMLCodec::SetVideo3dMode:mode3d(0x%x)", mode3d);
-  aml_set_sysfs_int("/sys/class/ppmgr/ppmgr_3d_mode", mode3d);
+  SysfsUtils::SetInt("/sys/class/ppmgr/ppmgr_3d_mode", mode3d);
 }
 
 std::string CAMLCodec::GetStereoMode()
@@ -2284,7 +2319,7 @@
     SetVideo3dMode(MODE_3D_DISABLE);
   }
 
-#if 1
+#if 0
   std::string s_dst_rect = StringUtils::Format("%i,%i,%i,%i",
     (int)dst_rect.x1, (int)dst_rect.y1,
     (int)dst_rect.Width(), (int)dst_rect.Height());
@@ -2313,9 +2348,9 @@
   char video_axis[256] = {};
   sprintf(video_axis, "%d %d %d %d", (int)dst_rect.x1, (int)dst_rect.y1, (int)dst_rect.x2, (int)dst_rect.y2);
 
-  aml_set_sysfs_str("/sys/class/video/axis", video_axis);
+  SysfsUtils::SetString("/sys/class/video/axis", video_axis);
   // make sure we are in 'full stretch' so we can stretch
-  aml_set_sysfs_int("/sys/class/video/screen_mode", 1);
+  SysfsUtils::SetInt("/sys/class/video/screen_mode", 1);
 
   // we only get called once gui has changed to something
   // that would show video playback, so show it.
