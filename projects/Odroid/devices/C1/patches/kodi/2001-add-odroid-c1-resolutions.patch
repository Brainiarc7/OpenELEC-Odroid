diff -Nur a/xbmc/utils/AMLUtils.cpp b/xbmc/utils/AMLUtils.cpp
--- a/xbmc/utils/AMLUtils.cpp	2015-11-18 11:37:11.019353342 -0500
+++ b/xbmc/utils/AMLUtils.cpp	2015-11-18 11:41:19.968340481 -0500
@@ -330,16 +330,52 @@
     res->fRefreshRate = 60;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "720p"))
+  else if (StringUtils::EqualsNoCase(fromMode, "720p23hz")) // fake
   {
     res->iWidth = 1280;
     res->iHeight= 720;
     res->iScreenWidth = 1280;
     res->iScreenHeight= 720;
-    res->fRefreshRate = 60;
+    res->fRefreshRate = 23.98;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "720p24hz")) // fake
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 24;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "720p25hz")) // fake
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 25;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "720p29hz")) // fake
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 29.97;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "720p50hz"))
+  else if (StringUtils::EqualsNoCase(fromMode, "720p30hz")) // fake
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 30;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "720p50hz")) // real
   {
     res->iWidth = 1280;
     res->iHeight= 720;
@@ -348,13 +384,31 @@
     res->fRefreshRate = 50;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "1080p"))
+  else if (StringUtils::EqualsNoCase(fromMode, "720p59hz")) // real
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 59.94;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "720p")) // real
+  {
+    res->iWidth = 1280;
+    res->iHeight= 720;
+    res->iScreenWidth = 1280;
+    res->iScreenHeight= 720;
+    res->fRefreshRate = 60;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p23hz")) // real
   {
     res->iWidth = 1920;
     res->iHeight= 1080;
     res->iScreenWidth = 1920;
     res->iScreenHeight= 1080;
-    res->fRefreshRate = 60;
+    res->fRefreshRate = 23.98;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
   else if (StringUtils::EqualsNoCase(fromMode, "1080p23hz"))
@@ -366,7 +420,7 @@
     res->fRefreshRate = 23.976;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "1080p24hz"))
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p24hz")) //real
   {
     res->iWidth = 1920;
     res->iHeight= 1080;
@@ -375,7 +429,25 @@
     res->fRefreshRate = 24;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "1080p30hz"))
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p25hz")) // fake
+  {
+    res->iWidth = 1920;
+    res->iHeight= 1080;
+    res->iScreenWidth = 1920;
+    res->iScreenHeight= 1080;
+    res->fRefreshRate = 25;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p29hz")) // fake
+  {
+    res->iWidth = 1920;
+    res->iHeight= 1080;
+    res->iScreenWidth = 1920;
+    res->iScreenHeight= 1080;
+    res->fRefreshRate = 29.97;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p30hz")) // fake
   {
     res->iWidth = 1920;
     res->iHeight= 1080;
@@ -384,7 +456,7 @@
     res->fRefreshRate = 30;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "1080p50hz"))
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p50hz")) // real
   {
     res->iWidth = 1920;
     res->iHeight= 1080;
@@ -402,14 +474,23 @@
     res->fRefreshRate = 59.940;
     res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
-  else if (StringUtils::EqualsNoCase(fromMode, "1080i"))
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p59hz")) // real
+  {
+    res->iWidth = 1920;
+    res->iHeight= 1080;
+    res->iScreenWidth = 1920;
+    res->iScreenHeight= 1080;
+    res->fRefreshRate = 59.94;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080p")) // real
   {
     res->iWidth = 1920;
     res->iHeight= 1080;
     res->iScreenWidth = 1920;
     res->iScreenHeight= 1080;
     res->fRefreshRate = 60;
-    res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+    res->dwFlags = D3DPRESENTFLAG_PROGRESSIVE;
   }
   else if (StringUtils::EqualsNoCase(fromMode, "1080i50hz"))
   {
@@ -429,6 +510,24 @@
     res->fRefreshRate = 59.940;
     res->dwFlags = D3DPRESENTFLAG_INTERLACED;
   }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080i59hz"))
+  {
+    res->iWidth = 1920;
+    res->iHeight= 1080;
+    res->iScreenWidth = 1920;
+    res->iScreenHeight= 1080;
+    res->fRefreshRate = 59.94;
+    res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+  }
+  else if (StringUtils::EqualsNoCase(fromMode, "1080i"))
+  {
+    res->iWidth = 1920;
+    res->iHeight= 1080;
+    res->iScreenWidth = 1920;
+    res->iScreenHeight= 1080;
+    res->fRefreshRate = 60;
+    res->dwFlags = D3DPRESENTFLAG_INTERLACED;
+  }
   else if (StringUtils::EqualsNoCase(fromMode, "4k2ksmpte"))
   {
     res->iWidth = 1920;
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2015-11-18 11:37:11.183351331 -0500
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2015-11-18 11:41:47.184014897 -0500
@@ -73,7 +73,7 @@
   aml_permissions();
   aml_cpufreq_min(true);
   aml_cpufreq_max(true);
-  DisableFreeScale();
+  FreeScale(false);
 }
 void CEGLNativeTypeAmlogic::Destroy()
 {
@@ -97,11 +97,12 @@
   if (!nativeWindow)
     return false;
 
-  nativeWindow->width = 1920;
-  nativeWindow->height = 1080;
-  m_nativeWindow = nativeWindow;
+  RESOLUTION_INFO res;
+  GetPreferredResolution(&res);
 
-  SetFramebufferResolution(nativeWindow->width, nativeWindow->height);
+  nativeWindow->width = res.iWidth;
+  nativeWindow->height = res.iHeight;
+  m_nativeWindow = nativeWindow;
 
   return true;
 #else
@@ -158,47 +159,107 @@
     ((fbdev_window *)m_nativeWindow)->height = res.iScreenHeight;
   }
 
-  switch((int)(0.5 + res.fRefreshRate))
+  bool result = false;
+
+  switch((int)res.fRefreshRate) // floor the resolution, so 23.98 will be brought down to 23
   {
     default:
-    case 60:
+    case 23:
+      switch(res.iScreenWidth)
+      {
+        case 1920:
+          result = SetDisplayResolution("1080p23hz");
+          break;
+      }
+      break;
+    case 24:
+      switch(res.iScreenWidth)
+      {
+        case 1920:
+          result = SetDisplayResolution("1080p24hz");
+          break;
+      }
+      break;
+   case 25:
+   case 50:
       switch(res.iScreenWidth)
       {
-        default:
         case 1280:
-          SetDisplayResolution("720p");
+          result = SetDisplayResolution("720p50hz");
           break;
         case 1920:
           if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
-            SetDisplayResolution("1080i");
+            result = SetDisplayResolution("1080i50hz");
           else
-            SetDisplayResolution("1080p");
+            result = SetDisplayResolution("1080p50hz");
           break;
       }
       break;
-    case 50:
+    case 29:
+    case 59:
       switch(res.iScreenWidth)
       {
-        default:
         case 1280:
-          SetDisplayResolution("720p50hz");
+         result = SetDisplayResolution("720p59hz");
           break;
         case 1920:
           if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
-            SetDisplayResolution("1080i50hz");
+            result = SetDisplayResolution("1080i59hz");
           else
-            SetDisplayResolution("1080p50hz");
+            result = SetDisplayResolution("1080p59hz");
           break;
       }
       break;
     case 30:
-      SetDisplayResolution("1080p30hz");
-      break;
-    case 24:
-      SetDisplayResolution("1080p24hz");
+    case 60:
+      switch(res.iScreenWidth)
+      {
+        case 1280:
+          result = SetDisplayResolution("720p");
+          break;
+        case 1920:
+          if (res.dwFlags & D3DPRESENTFLAG_INTERLACED)
+            result = SetDisplayResolution("1080i");
+          else
+            result = SetDisplayResolution("1080p");
+          break;
+      }
       break;
   }
 
+  return result;
+}
+
+bool CEGLNativeTypeAmlogic::SetDisplayResolution(const char *resolution)
+{
+  CLog::Log(LOGNOTICE, "%s::%s to %s", CLASSNAME, __func__, resolution);
+  std::string mode = resolution;
+  // switch display resolution
+  SysfsUtils::SetString("/sys/class/display/mode", mode.c_str());
+
+  RESOLUTION_INFO res;
+  if(aml_mode_to_resolution(mode.c_str(), &res)) {
+    CLog::Log(LOGDEBUG, "%s::%s to %dx%d", CLASSNAME, __func__, res.iWidth, res.iHeight);
+    int fd0;
+    std::string framebuffer = "/dev/" + m_framebuffer_name;
+
+    if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+    {
+      struct fb_var_screeninfo vinfo;
+      if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+      {
+         vinfo.xres = res.iWidth;
+         vinfo.yres = res.iHeight;
+         vinfo.xres_virtual = vinfo.xres;
+         vinfo.yres_virtual = vinfo.yres*2;
+         vinfo.bits_per_pixel = 32;
+         vinfo.activate = FB_ACTIVATE_ALL;
+         ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+      }
+      close(fd0);
+    }
+  }
+
   return true;
 }
 
@@ -207,7 +268,27 @@
   CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
   std::string valstr;
   SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr);
-  std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
+
+  std::vector<std::string> probe_str;
+  probe_str.push_back("720p23hz");  // fake
+  probe_str.push_back("720p24hz");  // fake
+  probe_str.push_back("720p25hz");  // fake
+  probe_str.push_back("720p29hz");  // fake
+  probe_str.push_back("720p30hz");  // fake
+  probe_str.push_back("720p50hz");  // real
+  probe_str.push_back("720p59hz");  // real
+  probe_str.push_back("720p");      // real
+  probe_str.push_back("1080p23hz"); // real
+  probe_str.push_back("1080p24hz"); // real
+  probe_str.push_back("1080p25hz"); // fake
+  probe_str.push_back("1080p29hz"); // fake
+  probe_str.push_back("1080p30hz"); // fake
+  probe_str.push_back("1080p50hz"); // real
+  probe_str.push_back("1080p59hz"); // real
+  probe_str.push_back("1080p");     // real
+  probe_str.push_back("1080i50hz"); // real
+  probe_str.push_back("1080i59hz"); // real
+  probe_str.push_back("1080i");     // real
 
   resolutions.clear();
   RESOLUTION_INFO res;
@@ -217,7 +298,6 @@
       resolutions.push_back(res);
   }
   return resolutions.size() > 0;
-
 }
 
 bool CEGLNativeTypeAmlogic::GetPreferredResolution(RESOLUTION_INFO *res) const
@@ -239,70 +319,18 @@
   return true;
 }
 
-bool CEGLNativeTypeAmlogic::SetDisplayResolution(const char *resolution)
-{
-  std::string mode = resolution;
-  // switch display resolution
-  SysfsUtils::SetString("/sys/class/display/mode", mode.c_str());
-
-  RESOLUTION_INFO res;
-  aml_mode_to_resolution(mode.c_str(), &res);
-  SetFramebufferResolution(res);
-
-  return true;
-}
-
-void CEGLNativeTypeAmlogic::SetupVideoScaling(const char *mode)
+void CEGLNativeTypeAmlogic::FreeScale(bool state)
 {
-  SysfsUtils::SetInt("/sys/class/graphics/fb0/blank",      1);
-  SysfsUtils::SetInt("/sys/class/graphics/fb0/free_scale", 0);
-  SysfsUtils::SetInt("/sys/class/graphics/fb1/free_scale", 0);
-  SysfsUtils::SetInt("/sys/class/ppmgr/ppscaler",          0);
-
-  if (strstr(mode, "1080"))
-  {
-    SysfsUtils::SetString("/sys/class/graphics/fb0/request2XScale", "8");
-    SysfsUtils::SetString("/sys/class/graphics/fb1/scale_axis",     "1280 720 1920 1080");
-    SysfsUtils::SetString("/sys/class/graphics/fb1/scale",          "0x10001");
-  }
-  else
-  {
-    SysfsUtils::SetString("/sys/class/graphics/fb0/request2XScale", "16 1280 720");
-  }
-
-  SysfsUtils::SetInt("/sys/class/graphics/fb0/blank", 0);
-}
-
-void CEGLNativeTypeAmlogic::DisableFreeScale()
-{
-  // turn off frame buffer freescale
-  SysfsUtils::SetInt("/sys/class/graphics/fb0/free_scale", 0);
-  SysfsUtils::SetInt("/sys/class/graphics/fb1/free_scale", 0);
-}
-
-void CEGLNativeTypeAmlogic::SetFramebufferResolution(const RESOLUTION_INFO &res) const
-{
-  SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
+  CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
+  std::string freescale_framebuffer = "/sys/class/graphics/" + m_framebuffer_name + "/free_scale";
+  SysfsUtils::SetInt(freescale_framebuffer.c_str(), state ? 1 : 0);
 }
 
-void CEGLNativeTypeAmlogic::SetFramebufferResolution(int width, int height) const
+bool CEGLNativeTypeAmlogic::IsHdmiConnected() const
 {
-  int fd0;
-  std::string framebuffer = "/dev/" + m_framebuffer_name;
-
-  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
-  {
-    struct fb_var_screeninfo vinfo;
-    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
-    {
-      vinfo.xres = width;
-      vinfo.yres = height;
-      vinfo.xres_virtual = 1920;
-      vinfo.yres_virtual = 2160;
-      vinfo.bits_per_pixel = 32;
-      vinfo.activate = FB_ACTIVATE_ALL;
-      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
-    }
-    close(fd0);
-  }
+  CLog::Log(LOGDEBUG, "%s::%s", CLASSNAME, __func__);
+  std::string hpd_state;
+  SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", hpd_state);
+  StringUtils::Trim(hpd_state);
+  return hpd_state == "1";
 }
diff -Nur a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
--- a/xbmc/windowing/egl/EGLNativeTypeAmlogic.h	2015-11-18 11:37:11.183351331 -0500
+++ b/xbmc/windowing/egl/EGLNativeTypeAmlogic.h	2015-11-18 11:41:47.184014897 -0500
@@ -49,12 +49,9 @@
 
 protected:
   bool SetDisplayResolution(const char *resolution);
-  void SetupVideoScaling(const char *mode);
-  void DisableFreeScale();
 
 private:
-  void SetFramebufferResolution(const RESOLUTION_INFO &res) const;
-  void SetFramebufferResolution(int width, int height) const;
-
   std::string m_framebuffer_name;
+  void FreeScale(bool state);
+  bool IsHdmiConnected() const;
 };
